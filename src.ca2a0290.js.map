{"version":3,"sources":["js/task_1.js","js/task_2.js","js/task_3.js","index.js"],"names":["logger","time","console","log","delay","ms","Promise","resolve","reject","setTimeout","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","value","logError","warn","amount","catch"],"mappings":";;;AAGA,IAAMA,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAEbG,EAAQ,SAAAC,GACJ,OAAA,IAAIC,QAAQ,SAACC,EAAQC,GAAUC,WAAW,WAC9CF,EAAQF,IACRA,MAKND,EAAM,KAAMM,KAAKV,GACjBI,EAAM,KAAMM,KAAKV,GACjBI,EAAM,MAAMM,KAAKV;;ACOjB,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAnBA,IAAMW,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC1BC,IAAAA,EAAeF,EAASG,IAAI,SAAAC,GAChCA,OAAAA,EAAKP,OAASI,EAAgBG,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCN,QAASM,EAAKN,SAAWM,IAExD,OAAA,IAAIb,QAAQ,SAACC,GACjBA,EAAQU,MAIRjB,EAAS,SAAAiB,GAAgBf,OAAAA,QAAQkB,MAAMH,IAE7CH,EAAgBH,EAAO,SAASD,KAAKV,GACrCc,EAAgBH,EAAO,OAAOD,KAAKV;;ACnBnC,IAAMqB,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAACC,GACf,OAAA,IAAItB,QAAQ,SAACC,EAASC,GACpBJ,IAAAA,EAAQiB,EAA0B,IAAK,KAC7CZ,WAAW,WACWe,KAAKE,SAAW,GAEhCnB,EAAQ,CACLsB,GAAID,EAAYC,GAChBzB,MAAAA,IAGTI,EAAOoB,EAAYC,KAGnBzB,MAIA0B,EAAa,SAACC,GAClB7B,QAAQC,IAAmB4B,eAAAA,OAAAA,EAAMF,GAAmBE,kBAAAA,OAAAA,EAAM3B,MAA1D,QAGI4B,EAAW,SAAAH,GACf3B,QAAQ+B,KAAqCJ,gCAAAA,OAAAA,EAA7C,+BAGFF,EAAgB,CAAEE,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH,GAETL,EAAgB,CAAEE,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH,GAETL,EAAgB,CAAEE,GAAI,GAAIK,OAAQ,KAC/BxB,KAAKoB,GACLK,MAAMH,GAETL,EAAgB,CAAEE,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH;;AC5CT,aAHA,QAAA,oBACA,QAAA,eACA,QAAA,eACA,QAAA","file":"src.ca2a0290.js","sourceRoot":"../src","sourcesContent":["// Задание 1\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\nconst delay = ms => {\n   return new Promise((resolve,reject)=>{setTimeout(() => {\n      resolve(ms)\n   }, ms);})\n  // Твой код\n};\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","// Задание 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n   const updatedUsers = allUsers.map(user =>\n     user.name === userName ? { ...user, active: !user.active } : user,\n   );\n   return new Promise((resolve) => {\n      resolve(updatedUsers)\n   })\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","// Задание 3\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n   return new Promise((resolve, reject) => {\n      const delay = randomIntegerFromInterval(200, 500);\n      setTimeout(() => {\n         const canProcess = Math.random() > 0.3;\n         if (canProcess) {\n            resolve({\n               id: transaction.id,\n               delay\n            });\n    } else {\n      reject(transaction.id);\n    }\n     \n   }, delay);})\n  \n};\n\nconst logSuccess = (value) => {\n  console.log(`Transaction ${value.id} processed in ${value.delay}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n \nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","import './sass/main.scss';\nimport './js/task_1';\nimport './js/task_2';\nimport './js/task_3';\n"]}